#! /usr/bin/env python3

import subprocess

# COLORS VARIABLE

PURPLE = '\033[95m'
BLUE = '\033[94m'
CYAN = '\033[96m'
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
NC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'


def execute(section, commands, base, ignore):
    splitted = commands.split("%20")
    if ignore == True:
        if base == "debian":
            splitted.append("-y")
        else:
            splitted.append("--noconfirm")

    print(splitted)
    print(f"{YELLOW}{section}{NC}")
    try:
        subprocess.run(splitted, check=True)
    except Exception as err:
        print(f"{RED}Error when installing some packages, please retry{NC}")


title = f"""{PURPLE}*AETHER DOTFILES INSTALLER*
INSTALLER BY ilham25{NC}"""
selectText = """
Select your linux base :
1. Debian Based (Ubuntu, Linux Mint, KDE Neon, Elementary OS, etc)
2. Arch Based (Artix, Archcraft, Archlabs, Manjaro, etc)
"""


def dotfiles():
    print(f"{GREEN}INSTALLING DOTFILES CONFIG{NC}")
    execute("Creating temporary directory", "mkdir%20tmp", "", False)
    execute("-- Change to temporary directory", "cd%20tmp", "", False)
    execute("Clone dotfiles-aether",
            "git%20clone%20https://github.com/ilham25/dotfiles-aether", "", False)
    execute("Copy all dotfiles config to home directory",
            "cd%20dotfiles-aether/", "", False)
    execute("--", "cp%20-r%20{.*,*}%20~/", "", False)
    execute("Installing custom icon", "cd%20~/.icons/", "", False)
    execute("--", "tar%20-Jxvf%20oomox-aesthetic-light.tar.xz", "", False)
    execute("--", "tar%20-Jxvf%20oomox-aesthetic-dark.tar.xz", "", False)
    execute("-- Copy all custom icons to /usr/share/icons directory",
            "sudo%20cp%20-r%20{oomox-aesthetic-light,oomox-aesthetic-dark}%20/usr/share/icons/", "", False)
    execute("-- Delete unnecessary files",
            "rm%20-r%20~/.icons/{oomox-aesthetic-light,oomox-aesthetic-dark,*.tar.xz}", "", False)
    execute("Refresh font cache", "fc-cache%20-rv", "", False)


def debian():
    print(f"{GREEN}INSTALLING DOTFILES DEPENDENCIES${NC}")
    execute("Installing i3-Gaps Window Manager", "echo", "debian", False)
    execute(
        "--", "sudo%20apt-get%20install%20software-properties-common", "debian", True)
    execute("-- Add PPA repo for i3-gaps",
            "sudo%20add-apt-repository%20ppa:kgilmer/speed-ricer", "debian", True)
    execute("-- Update apt", "sudo%20apt-get update", "debian", True)
    execute("-- Installation",
            'sudo%20apt-get%20install%20i3-gaps-wm%20i3-gaps-session', "debian", True)
    execute("Installing core dependencies", 'sudo%20apt%20install%20feh%20git%20rsync%20python%20psmisc%20wireless-tools%20alsa-utils%20brightnessctl%20nitrogen%20dunst%20tint2%20gsimplecal%20rofi%20lxappearance%20qt5ct%20qt5-style-plugins%20lxpolkit%20xautolock%20rxvt-unicode%20xclip%20scrot%20thunar%20thunar-archive-plugin%20thunar-media-tags-plugin%20thunar-volman%20ffmpegthumbnailer%20tumbler%20w3m%20w3m-img%20geany%20viewnior%20mpv%20mpd%20mpc%20ncmpcpp%20pavucontrol%20parcellite%20neofetch%20htop%20imagemagick%20ffmpeg%20playerctl%20xsettingsd', "debian", True)
    execute("Installing oh-my-zsh & plugins",
            "sudo%20apt%20install%20zsh", "debian", True)
    execute("-- Change default shell to zsh for current user",
            "chsh%20-s%20/usr/bin/zsh", "debian", False)
    execute("-- Plugin install (oh-my-zsh)",
            'sh%20-c%20"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"', "debian", False)
    execute("-- Plugin install (zsh-syntax-highlighting)",
            'git%20clone%20https://github.com/zsh-users/zsh-syntax-highlighting.git%20${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting', "debian", False)
    execute("-- Plugin install (zsh-autosuggestions)",
            'git%20clone%20https://github.com/zsh-users/zsh-autosuggestions.git%20${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions', "debian", False)
    execute('Installing picom compositor', "sudo%20apt%20install%20libxext-dev%20libxcb1-dev%20libxcb-damage0-dev%20libxcb-xfixes0-dev%20libxcb-shape0-dev%20libxcb-render-util0-dev%20libxcb-render0-dev%20libxcb-randr0-dev%20libxcb-composite0-dev%20libxcb-image0-dev%20libxcb-present-dev%20libxcb-xinerama0-dev%20libxcb-glx0-dev%20libpixman-1-dev%20libdbus-1-dev%20libconfig-dev%20libgl1-mesa-dev%20libpcre2-dev%20libevdev-dev%20uthash-dev%20libev-dev%20libx11-xcb-dev%20ninja-build meson", "debian", True)
    execute("-- Clone picom build source",
            "git%20clone%20https://github.com/yshui/picom.git", "debian", False)
    execute("--", "cd%20picom/", "", False)
    execute("-- Start building",
            "git%20submodule%20update%20--init%20--recursive", "debian", False)
    execute("--", "meson%20--buildtype=release%20.%20build", "debian", False)
    execute("--", "ninja%20-C%20build", "debian", False)
    execute("--", "ninja%20-C%20build%20install", "debian", False)
    execute("Installing psuinfo - Network & CPU Monitor, RAM Usage",
            "echo", "debian", False)
    execute("-- Clone psuinfo from it's repo",
            "git%20clone%20https://github.com/nwg-piotr/psuinfo.git", "debian", False)
    execute("--", "cd%20psuinfo/", "debian", False)
    execute("-- Copy psuinfo and icon to /usr/bin directory",
            "sudo%20cp%20-r%20{psuinfo,icons}%20/usr/bin", "debian", False)
    dotfiles()


def arch():
    print(f"{GREEN}INSTALLING DOTFILES DEPENDENCIES${NC}")
    print(f"{RED}Consider install yay AUR helper first if error acquired!{NC}")
    execute("Installing i3-Gaps Window Manager",
            "sudo%20pacman%20-S%20i3-gaps", "arch", True)
    execute("Installing audio",
            "sudo%20pacman%20-S%20alsa-utils%20pulseaudio%20pulseaudio-alsa", "arch", True)
    execute("Installing brightness", "yay%20-S%20brightnessctl", "arch", True)
    execute("Installing psuinfo - Network & CPU Monitor, RAM Usage",
            "yay%20-S%20psuinfo", "arch", True)
    execute("Installing wireless tools",
            "sudo%20pacman%20-S%20wireless_tools", "arch", True)
    execute("Installing git", "sudo%20pacman%20-S%20git", "arch", True)
    execute("Installing other utility (panel, notification, terminal, file manager, etc)",
            "yay%20-S%20dunst%20tint2%20gsimplecal%20rofi%20feh%20lxappearance%20qt5ct%20qt5-styleplugins%20lxsession%20xautolock%20rxvt-unicode-patched%20xclip%20scrot%20thunar%20thunar-archive-plugin%20thunar-media-tags-plugin%20thunar-volman%20tumbler%20w3m%20geany%20nano%20vim%20viewnior%20pavucontrol%20parcellite%20neofetch%20htop%20picom-ibhagwan-git%20gtk2-perl%20xfce4-power-manager%20zsh%20zsh-completions%20imagemagick%20playerctl%20networkmanager-dmenu", "arch", True)
    execute("Installing oh-my-zsh & plugins", "echo", "arch", False)
    execute("-- Change default shell to zsh for current user",
            "chsh%20-s%20/usr/bin/zsh", "arch", False)
    execute("-- Plugin install (oh-my-zsh)",
            'sh%20-c%20"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"', "arch", False)
    execute("-- Plugin install (zsh-syntax-highlighting)",
            'git%20clone%20https://github.com/zsh-users/zsh-syntax-highlighting.git%20${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting', "arch", False)
    execute("-- Plugin install (zsh-autosuggestions)",
            'git%20clone%20https://github.com/zsh-users/zsh-autosuggestions.git%20${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions', "arch", False)
    dotfiles()


options = {
    1: debian,
    2: arch,
}

print(title)
print(selectText)
choice = input("Select : ")

try:
    options[int(choice)]()
except:
    print(f"{RED}Input error")
